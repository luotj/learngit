#将工作区的修改提交到暂存区
git add filename
#将暂存区的修改提交的版本库
git commit -m "xxx"

#查看commit历史记录
git log --pretty=oneline

#查看执行的指令历史
git reflog

#将工作区的文件回退到某次提交版本
git reset --hard HEAD^  回退到上一次提交
git reset --hard HEAD^^ 回退到上上次提交
git reset --hard commitId 回退到指定commitId版本

#查看工作区的内容与暂存区内容的区别
git diff filename

#查看工作区和版本库里面的区别
git diff HEAD -- filename

#将工作区的内容回退到最近一次add或者commit(当暂存区为空时回退到最近一次commit，否则回退到工作区)
git checkout -- filename

#如果想放弃已经add的修改，并且恢复工作区到最近一次commit，则执行如下两条命令:
git reset HEAD filename  将暂存区的内容回退到上一次commit
git checkout -- filename 将工作去的内容回退到和暂存区一样

#当需要删除版本库中的一个文件时可以在工作区把这个文件删除了，然后用git rm filename 或者git add filename再git commit -m 'remove filename'

#要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

#git分支
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

#查看分支合并情况
git log --graph --pretty=oneline --abbrev-commit

#采用no fast-forward的方式合并分支
git merge --no-ff -m "merge with no-ff" dev
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

#stash
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；、
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

#创建远程dev分支到本地
git checkout -b dev origin/dev

#推送当前分支到远端dev分支
git push origin dev

#多人在同一分支提交代码时，出现冲突时，把代码pull下来，处理冲突，处理完之后再push,
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

#git rebase可以让提交点合并，方便查看commit情况
